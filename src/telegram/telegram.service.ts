import { Inject, Injectable } from '@nestjs/common';
import { Context, Scenes } from 'telegraf';
import { KEYBOARD_MENU, MENULIST } from '../common/constants';
import { CouponsTokenEnum } from '../coupons/enum/tokens/coupons.token.enum';
import { CouponsService } from '../coupons/coupons.service';

@Injectable()
export class TelegramService {
  constructor(
    @Inject(CouponsTokenEnum.COUPONS_SERVICE_TOKEN)
    private readonly couponsService: CouponsService,
  ) {}

  async menu(ctx: Context) {
    await ctx.replyWithPhoto(
      'https://telegra.ph/file/df62280c6631e7f6f6977.jpg',
      {
        caption: `–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è:\n\n${MENULIST.join('\n')}`,
        reply_markup: {
          keyboard: KEYBOARD_MENU,
          resize_keyboard: true,
        },
      },
    );
  }

  async confirmOrNot(ctx: Scenes.WizardContext) {
    const cntx = ctx as any;
    const event = cntx.session.event
      ? cntx.session.event.slice(2)
      : '–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫';
    const mess = `–í–∞—à–µ –∏–º—è: ${(ctx as any).session.name}\n–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${
      cntx.session.phone
    }\n–í—ã —Ö–æ—Ç–∏—Ç–µ: ${event}`;
    await ctx.replyWithPhoto(
      'https://telegra.ph/file/d99e7462f6dad57d84ddc.jpg',
      {
        caption: `${mess}\n\n–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?`,
        reply_markup: {
          one_time_keyboard: true,
          resize_keyboard: true,
          keyboard: [
            [{ text: '–î–∞' }, { text: '–ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å' }, { text: '–û—Ç–º–µ–Ω–∞' }],
          ],
        },
      },
    );
  }

  async bookEvent(ctx: Context) {
    await (ctx as any).scene.enter('book-event');
  }

  async contacts(ctx: Context) {
    await ctx.replyWithPhoto(
      'https://telegra.ph/file/ca298582542555bb19a77.jpg',
      {
        caption:
          `–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n${process.env.CONTACTS.split('\\n').join('\n')}` +
          `\n\n–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:\n${process.env.ADRESS}`,
        reply_markup: {
          keyboard: KEYBOARD_MENU,
          resize_keyboard: true,
        },
      },
    );
  }

  async whatDoWeGot(ctx: Context) {
    await ctx.replyWithPhoto(
      'https://scontent-ams2-1.cdninstagram.com/v/t51.2885-15/297333758_1911665445696768_2324495819146856463_n.webp?stp=dst-jpg_e35&_nc_ht=scontent-ams2-1.cdninstagram.com&_nc_cat=100&_nc_ohc=NOElGD2cEjMAX-jJ9g2&edm=ALQROFkBAAAA&ccb=7-5&ig_cache_key=Mjg5NzQwMzc2NTcyMDgzODcxMA%3D%3D.2-ccb7-5&oh=00_AT9paCc56GJkaNNhEqQ0JmcmABNcHzQefszscUBZIlHbhw&oe=63395747&_nc_sid=30a2ef',
      {
        caption:
          '–í —Ü–µ–Ω—Ç—Ä–µ –µ—Å—Ç—å:\n\n' +
          'üß∂–ë–∞—Ç—É—Ç—ã\n' +
          'üé≤ –õ–∞–±–∏—Ä–∏–Ω—Ç —Å –±–∞—Å—Å–µ–π–Ω–æ–º –∏–∑ —à–∞—Ä–∏–∫–æ–≤ \n' +
          'üéÆ –ò–≥—Ä—ã –Ω–∞ –•–í–û–•\n' +
          'ü•≥Ô∏è –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –º–∞–ª—ã—à–µ–π \n' +
          '‚òÅ –ë–æ–ª—å—à–∞—è –º—è–≥–∫–∞—è –∑–æ–Ω–∞ \n' +
          'ü§π‚Äç‚ôÄÔ∏è–ê–Ω–∏–º–∞—Ç–æ—Ä—ã, –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ \n',
        reply_markup: {
          keyboard: KEYBOARD_MENU,
          resize_keyboard: true,
        },
      },
    );
  }

  async getPromoCode(ctx: Context) {
    const subed = await this.checkIfSubscibed(ctx);
    if (!subed) {
      await ctx.reply(
        '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã–º –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª',
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è',
                  url: 'https://t.me/jumpcitybrd',
                },
              ],
            ],
          },
        },
      );
      return;
    }
    await this.couponsService.giveCoupon(ctx);
  }

  async orderCall(ctx: Context) {
    await (ctx as any).scene.enter('order-call');
  }

  async checkIfSubscibed(ctx: Context) {
    const status = (
      await ctx.telegram.getChatMember(process.env.CHANNEL, ctx.from.id)
    ).status;
    switch (status) {
      case 'member':
      case 'administrator':
      case 'creator': {
        return true;
      }
      default: {
        return false;
      }
    }
  }

  async sendOrder(
    ctx: Context,
    order: { name: string; phone: string; num: number; event: string },
  ) {
    const cntx = ctx as any;
    const event = cntx.session.event
      ? cntx.session.event.slice(2)
      : '–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫';
    await ctx.telegram.sendMessage(
      process.env.CHATBOOK,
      `–ó–∞–∫–∞–∑ –Ω–æ–º–µ—Ä: ${order.num}\n–ò–º—è: ${order.name}\n–¢–µ–ª–µ—Ñ–æ–Ω:${order.phone}\n–ó–∞–ø—Ä–æ—Å: ${event}`,
      {
        reply_markup: {
          inline_keyboard: [[{ text: '–ì–æ—Ç–æ–≤–æ', callback_data: 'done' }]],
        },
      },
    );
  }
}
